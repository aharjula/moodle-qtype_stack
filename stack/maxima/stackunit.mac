/*  Author Matti Harjula
    Aalto University
    Copyright (C) 2015 Matti Harjula

    This program is free software: you can redistribute it or modify
    it under the terms of the GNU General Public License version two.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>. */


/****************************************************************/
/*  Simplified tools for handling SI-units (+liters)            */
/*                                                              */
/*  Matti Harjula <matti.harjula@aalto.fi>                      */
/*  V0.33 August 2015                                           */
/*                                                              */
/****************************************************************/

stack_unit_si_prefix_code:[y,z,a,f,p,n,u,m,c,d,da,h,k,M,G,T,P,E,Z,Y]$
stack_unit_si_prefix_multiplier:[10^-24,10^-21,10^-18,10^-15,10^-12,10^-9,10^-6,10^-3,10^-2,10^-1,10,10^2,10^3,10^6,10^9,10^12,10^15,10^18,10^21,10^24]$
stack_unit_si_prefix_tex:["y","z","a","f","p","n","\\mu ","m","c","d","da","h","k","M","G","T","P","E","Z","Y"]$
stack_unit_si_unit_code:[m,g,s,A,ohm,K,mol,cd,Hz,N,Pa,J,W,C,V,F,S,Wb,T,H,l,Bq,Gy,Sv,lm,lx]$
stack_unit_si_unit_conversions:[m,kg/1000,s,A,kg*m^2/(s^3*A^2),K,mol,cd,1/s,kg*m/(s^2),kg/(m*s^2),kg*m^2/(s^2),kg*m^2/(s^3),s*A,kg*m^2/(s^3*A),A^2*s^4/(kg*m^2),s^3*A^2/(kg*m^2),kg*m^2/(s^2*A),kg/(s^2*A),kg*m^2/(s^2*A^2),m^3/1000,1/s,m^2/s^2,m^2/s^2,cd,cd/m^2]$
stack_unit_si_unit_tex:["m","g","s","A","\Omega","K","mol","cd","Hz","N","Pa","J","W","C","V","F","S","Wb","T","H","l","Bq","Gy","Sv","lm","lx"]$

/* Declare SI-units as constants and set \texput rules for them, the mode parameter does nothing */
/* except skips the syntax validation error... */
stack_unit_si_declare(mode) := block([pfi,ui,simp],
 simp:true, /* seriously, if simp:false then "apply: subscript must be an integer; found: 1 + 1" */
 for ui:1 thru length(stack_unit_si_unit_code) do (
  for pfi:1 thru length(stack_unit_si_prefix_code) do (
   apply('texput,[concat(stack_unit_si_prefix_code[pfi],stack_unit_si_unit_code[ui]),sconcat("\\mathrm{",stack_unit_si_prefix_tex[pfi],stack_unit_si_unit_tex[ui],"}")]),
   apply('declare,[concat(stack_unit_si_prefix_code[pfi],stack_unit_si_unit_code[ui]),constant])
  ),
  apply('texput,[stack_unit_si_unit_code[ui],sconcat("\\mathrm{",stack_unit_si_unit_tex[ui],"}")]),
  apply('declare,[stack_unit_si_unit_code[ui],constant])
 )
)$

/* Converts the whole expression to SI-base units */
stack_unit_si_to_si_base(expression) := block([ui,pfi,work,simp],
 simp:true, /* seriously, if simp:false then "apply: subscript must be an integer; found: 1 + 1" */
 work:expression,
 for ui:1 thru length(stack_unit_si_unit_code) do (
  for pfi:1 thru length(stack_unit_si_prefix_code) do (
   work: subst(stack_unit_si_prefix_multiplier[pfi]*stack_unit_si_unit_code[ui],concat(stack_unit_si_prefix_code[pfi],stack_unit_si_unit_code[ui]),work)
  ),
  work: subst(stack_unit_si_unit_conversions[ui],stack_unit_si_unit_code[ui],work)
 ),
 return(work)
)$
